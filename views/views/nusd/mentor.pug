html
	head
		title Mentor page
		script(src='/socket.io/socket.io.js')
		script(type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-MML-AM_CHTML")
		script(src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/0.5.0-beta4/html2canvas.js" type="text/javascript" xml="space")
		style.
			
			#numspace {
				width:80%;
				background-color:#cccccc;
			
			}
			.lbdiv {
				width:100%;
				background-color:#dddddd;
			}
			.numdiv {
				background-color:#666666;
				width:4%;
				color:#bbbbbb;
				display:inline;
				margin:0 .5%;
				cursor: pointer;
			}
			.numdiv:hover {
				color:#dd2222;
			}
			.userlist {
				cursor:pointer;
			}
			canvas {
				//border: 1px solid black;
				//cursor:url('/cursor/kakashi.ani'), url('/cursor/Dot.cur');
				cursor:url('/cursor/Dot.cur'), default;
			}

			body {
				padding:0;
				margin:0;
			}
			#bodypanel{
				background-color:black;
				width:100%;
				height:100%;
			}

			#drawdiv {
				width:100%;
				height:100%;
			}
			#contentspanel {
				width:50%;
				height:100%;
				float:left;
				overflow:hidden;
			}

			#userpanel {
				width:50%;
				height:100%;
				overflow:hidden;
				float:left;
			}
			#logoutdiv {
				width:100%;
				height:10%;
			}		
			#userlist {
				width:100%;
				height:20%;
			}	
			#chatmsgdiv {
				width:100%;
				height:70%;
			}
			#chathistory {
				width:100%;
				height:90%;
				background-color:#16ecdf;
			}
			#chathistory div {
				width:90%;
				text-align:right;
				margin:0 5%;
				
			}
			#inputdiv {
				width:100%;
				height:10%;
			}
			#chatmsg {
				width:80%;
				height:100%;
			}
			#sendbutton {
				width:20%;
				height:100%;
			}
			canvas:hover {
				//cursor:Crosshair;
			}

			#callingoptionpanel {
				position:absolute;
				top:0;
				right:0;
				z-index:4;
				background-color:#dddddd;
				width:5%;
				height:100%;
				overflow:hidden;
				transition: width .2s;
			}
			#callingoptionpanel:hover {
			}
		
			#canvasdiv {
				width:100%;
				height:100%;
				//margin:0 28% 0 12%;
			}	
			#optionpanel {
				//width:100%;
				//height:10%;	
			}
			#myPics{
				position:absolute;
				z-index:3;
			}
	
			#layerpic {
				position:absolute;
				z-index:2;
			}
			#shareinputdiv {
				z-index:1;
			}
			#msgdiv {
				word-break:break-all;
			}
			#msgdiv a {
			}


			#picdiv img {
				width:80%;
				margin:10% 10% 0 10%;
				image-orientation: from-image;
			}

			#cptprblistdiv {
				width:100%;
				background-color:#eeeeee;
				height:70%;
				overflow:auto;
			}
			#cptprblistdiv div {
				border: solid;
			}
			.rankedit {
				display:inline-block;
				padding: 0 2% 0 2%;
			}
			#r1set {
				padding:5% 0 5% 2%;
			}

	body
		div(id='bodypanel')
			div(id='drawdiv')
				div(id='canvasdiv')
					canvas(id='myPics')
					canvas(id='layerpic')
					div(id='shareinputdiv')
				//div(id='optionpanel')
					//button(onclick='clearCanvas();') Erase 
			div(id='callingoptionpanel')
				div(id='contentspanel')
					//div(id='textlistdiv')
						//-for(var ia=0; ia<r.length; ia++){
							//div
								//-if(r[ia].terminalid!=null){	
									//a(onclick='displayNumber('+r[ia].startnum+','+r[ia].endnum+')' href='#')=r[ia].texttitle
								//-}
						//-}
					div(id='textinputdiv')
						input(type='hidden' id='chosenuser')
						//input(type='text' id='nusdlist')
						//button(value='submit' onclick='sendSomething();') Send
					//div(id='numspacediv')
						//div(id='numspace')
					div(id='cptpanel')
						div
							div(class='rankedit')
								a(href='/admin/cpt?stchk=1' target='_blank' rel='noopenner noreferer' style='text-decoration:none') R1Edit	
							div(class='rankedit')
								a(href='/admin/cpt?stchk=4' target='_blank' rel='noopenner noreferer' style='text-decoration:none') R2Edit
							div(class='rankedit')
								a(href='/admin/cpt?stchk=8' target='_blank' rel='noopenner noreferer' style='text-decoration:none') R3Edit
							div(class='rankedit')
								a(href='/admin/cpt?stchk=5' target='_blank' rel='noopenner noreferer' style='text-decoration:none') PrbOrder
							div(class='rankedit')
								a(href='/admin/cpt?stchk=6' target='_blank' rel='noopenner noreferer' style='text-decoration:none') R1Order
							div(class='rankedit')
								a(href='/admin/cpt?stchk=7' target='_blank' rel='noopenner noreferer' style='text-decoration:none') R2Order

							div(id='logoutdiv')
								a(href='/logout') logout
						div(id='cptprbsetlistdiv')
							div(id='r2set')
							div(id='r1set')
							div(class='prbsetlist')

						div(id='chatmsgdiv')
							//div(id='chathistory')
							div(id='inputdiv')
								input(type='text' id='chatmsg')
								button(id='sendbutton' onclick='sendMentormsg()') send
								
				div(id='userpanel')
					div(id='userlist')
						div(id='userlistdiv')
					div
						button(onclick='rankCall();') Refresh
					div(id='cptprblistdiv')



				
		script.
			var socket = io('/nusd');
			var chosenuser='';
			socket.on('connect',()=>{
				console.log('connection ready');
				socket.emit('nusdsocketidregister',{socketid:socket.id,username:'mentor(optional)',position:2});

			});


			var stdwidth=1440;
			var stdfont=14;
			var stdpensize=2;


			function putColoron(classN, idN,colorN){
				var cn=document.getElementsByClassName(classN);
				for(var ia=0; ia<cn.length; ia++){	
					cn[ia].style.color='';
					cn[ia].style.backgroundColor='';
				}
				document.getElementById(idN).style.backgroundColor=colorN[0];
				document.getElementById(idN).style.color=colorN[1];
			}
			function r1Call(r1obj){
				removeallele('r1set')
				removeallele('cptprblistdiv');	
				var r1set=document.getElementById('r1set');
				for(var ia=0; ia<r1obj.length; ia++){
					var r1div=document.createElement('div');
					r1div.className='r1div';
					r1div.id=r1obj[ia].r1id;	
					var r1diva=document.createElement('a');
					r1diva.innerHTML=ia+1+'. '+r1obj[ia].r1listinfo;
					r1div.appendChild(r1diva);
					r1div.onclick=function(i,j){return function(){callprblist(i);putColoron('r1div',j,['blue','white'])}}(r1obj[ia].r1prb,r1obj[ia].r1id);
					r1set.appendChild(r1div);
					
				}
				MathJax.Hub.Queue(["Typeset",MathJax.Hub,"r1set"])	
				
			}	

			function rankCall(){
				socket.emit('rankcall');
			}	
			rankCall();
			socket.on('rankcallafter',function(a){
				removeallele('r2set');
				var r2setdiv = document.getElementById('r2set');
			
				var indr2set=[];
				for(var ia=0; ia<a.a.length; ia++){
					var chk=0;
					for(var ib=0; ib<indr2set.length; ib++){
						if(indr2set[ib][0]==a.a[ia].parentcol){
							chk=1;
							break;
						}
					}	
					if(chk==0){
						indr2set.push([a.a[ia].parentcol,a.a[ia].r2listinfo]);
					}
				}

				
				r2obj=[];
				for(var ia=0; ia<indr2set.length; ia++){
					r2obj[ia]={r2id:indr2set[ia][0],r2listinfo:indr2set[ia][1],r1set:[]}
					for(var ib=0; ib<a.a.length; ib++){
						if(a.a[ib].parentcol==indr2set[ia][0]){
							r2obj[ia].r1set.push({r1id:a.a[ib].childcol,r1prb:a.a[ib].prblist,r1listinfo:a.a[ib].listinfo})
						}
					}
				}

				for(var ia=0; ia<r2obj.length; ia++){
					var r2divadiv=document.createElement('div');
					r2divadiv.className='r2div';
					r2divadiv.id=r2obj[ia].r2id;
					var r2diva=document.createElement('a');
					r2diva.innerHTML=ia+1+'. '+r2obj[ia].r2listinfo;
					r2divadiv.appendChild(r2diva);
					r2divadiv.onclick=function(i,j){return function(){r1Call(i); putColoron('r2div',j,['red','white']);}}(r2obj[ia].r1set,r2obj[ia].r2id);
					r2setdiv.appendChild(r2divadiv);
				}		
				MathJax.Hub.Queue(["Typeset",MathJax.Hub,"r2set"])	
				
			});

			function callprblist(plist){
				socket.emit('nusdcallprblist',{plist:plist});
			}
			socket.on('nusdgetprblist',function(p){
				removeallele('cptprblistdiv');	
				var cptprblistdiv=document.getElementById('cptprblistdiv');
				console.log(p);
				for(var ia=0; ia<p.prbcon.length; ia++){
					var cptprbdiv=document.createElement('div');
					cptprbdiv.className='cptprbdiv';
					var cptprbdivprb=document.createElement('div');
					var cptprbdivprba=document.createElement('a');
					cptprbdivprba.innerHTML=p.prbcon[ia][1];
					cptprbdivprb.appendChild(cptprbdivprba);
					cptprbdiv.appendChild(cptprbdivprb);

					var prbobj={};
					var sendoption=0;
					prbobj.prb=p.prbcon[ia][1];
					prbobj.pic=p.prbcon[ia][8];
					prbobj.sendoption=sendoption;

					cptprbdiv.onclick=function(i){return function(){sendSomething(i,1)}}(prbobj);

					cptprblistdiv.appendChild(cptprbdiv);
				}	
				MathJax.Hub.Queue(["Typeset",MathJax.Hub,"cptprblistidv"])	
			});

			var userlist=!{JSON.stringify(userlist)};


			function fillUsers(userlist){
				removeallele('userlistdiv')
				var userlistdiv=document.getElementById('userlistdiv');
				for(var ia=0; ia<userlist.length; ia++){
					var udiv=document.createElement('div');
					udiv.className='userlist'
					var udiva=document.createElement('A');
					udiv.onclick=function(i,j){ return function(){chosenuser=i;
						var chosen=document.getElementById('chosenuser');
						chosen.value=i;
						chosenuser=i;
						colorErase('userlist');
						j.style.backgroundColor='red';
						
						
					}}(userlist[ia].username,udiv);
					udiva.innerHTML=userlist[ia].username;
					udiv.appendChild(udiva);
					userlistdiv.appendChild(udiv);
				}
			};
			fillUsers(userlist);


			function colorErase(cname){
				var cdiv=document.getElementsByClassName(cname);
				for(var ia=0; ia<cdiv.length; ia++){
					cdiv[ia].style.backgroundColor='';
				}
			}
			socket.on('mentoruserlistrefresh',function(a){
				fillUsers(a.userlist);
			});
			function sendSomething(prbobj,opt){
				var chosenuserinput=document.getElementById('chosenuser');
				//var nusdlist=document.getElementById('nusdlist');
				if(chosenuserinput.value!=''){
				
					if(opt==0){
						socket.emit('numbersent',{username:chosenuserinput.value, nusdlist:nusdlist.value,opt:opt});
						alert('number sent')
						//nusdlist.value=''; 	
						removeallele('numspace');
					}else if(opt==1){// send problem
						socket.emit('numbersent',{username:chosenuserinput.value, prbobj:prbobj,opt:opt});
						
				
						removeallele('shareinputdiv');
						var msgdiv=document.createElement('div');
						msgdiv.id='msgdiv';
						var msga=document.createElement('A');
						msga.innerHTML=prbobj.prb;
						msga.style.color=environdefine.firstpen[0];
						msgdiv.appendChild(msga);
						shareinputdiv.appendChild(msgdiv);


						var fontfactor=2.5;

						msga.style.fontSize=((canvaswidth*14)/(1440))*fontfactor + 'px';
						/*
						if(widthoriented==0){
							msga.style.fontSize=(canvaswidth*14)/(1440)
						}else{
							msga.style.fontSize='3vw'
						}*/

						//msga.style.fontSize='3vh'

						if(prbobj.pic!=null){
							var picdiv=document.createElement('div');
							picdiv.id='picdiv';
							var picdivimg=document.createElement('img');
							picdivimg.src=prbobj.pic
							picdiv.appendChild(picdivimg);
							picdiv.style.backgroundColor=environdefine.picbackcolor;
							picdiv.style.padding='0 0 5% 0';
							shareinputdiv.appendChild(picdiv);

							msgdiv.style.cssFloat='left';
							picdiv.style.cssFloat='left';

							msgdiv.style.width='60%';
							picdiv.style.width='40%';

							msga.style.display='inline-block';
							msga.style.padding='5% 0 0 5%';
							
						}else{
							msgdiv.style.position='relative';
							msgdiv.style.top='5%';
							msgdiv.style.left='5%';
							msgdiv.style.width='80%';
							
				
						}


						MathJax.Hub.Queue(["Typeset",MathJax.Hub,"shareinputdiv"])	
						switchFolding();



		
					}
				}else{
					alert('error! check send number and user selection');
				} 
			}
			function displayNumber(sm,em){
				
					var numspace=document.getElementById('numspace');
					removeallele('numspace');
					for(var ia=sm; ia<=em; ia++){
						var numdiv=document.createElement('div');
						numdiv.innerHTML=ia;
						numdiv.className='numdiv';


						if(ia%10==1){
							var lbdiv=document.createElement('div');
							//line break div

							lbdiv.appendChild(numdiv);
							lbdiv.className='lbdiv';
							if(ia==em){
								numspace.appendChild(lbdiv);
							}
				

	
						}else if(ia%10==0){
							lbdiv.appendChild(numdiv);
							numspace.appendChild(lbdiv);
						}else{
							if(ia==em){
								numspace.appendChild(lbdiv);
							}
							lbdiv.appendChild(numdiv);
						}
		
					}
			}

			function removeallele(parentid){
				var parent=document.getElementById(parentid);
				while(parent.firstChild){
					parent.firstChild.remove();
				}
			}



			var gratio=.61804;


			var marginratio=1;

			var tmpwidth=window.innerWidth*marginratio;
			var tmpheight=tmpwidth*gratio;



			if(tmpheight>window.innerHeight){
				var canvaswidth=window.innerHeight/gratio;
				var widthoriented=0;
			}else{
				var canvaswidth=window.innerWidth*marginratio;
				var widthoriented=1;
			}
			var tm=1;




			var apppensize=(canvaswidth*stdpensize/stdwidth);
			var environdefine={background:['#336633',apppensize*16,'background'],firstpen:['white',apppensize,'firstpen'],secondpen:['#B43104',apppensize,'secondpen'],eraser:['',apppensize*16,'eraser'],layer:{color:'blue',size:apppensize,code:'layer'},layereraser:['#11a527',apppensize*16,'layereraser'],picbackcolor:'#bbbbbb'};




			//shareinputdiv
			var shareinputdiv = document.getElementById('shareinputdiv');
			shareinputdiv.style.width=canvaswidth + 'px';
			shareinputdiv.style.height=canvaswidth*gratio+'px';
			shareinputdiv.style.backgroundColor=environdefine.background[0];

			var testdiv=document.createElement('div');
			var testa=document.createElement('A');
			testa.style.color='white';
			testdiv.appendChild(testa);
			shareinputdiv.appendChild(testdiv);

			//layerpic
			const layerpic=document.getElementById('layerpic');

			var tm=1;
			layerpic.width=canvaswidth*tm;
			layerpic.height=gratio*canvaswidth*tm;
			layerpic.style.width=canvaswidth*tm+'px';
			layerpic.style.height=gratio*canvaswidth*tm+'px';

			const lcon=layerpic.getContext('2d')


			//Self Drawing 
			let isDrawing = false;
			let x = 0;
			let y = 0;
		

			var stat={color:environdefine.firstpen[0], size:environdefine.firstpen[1],code:environdefine.firstpen[2]};

			const myPics = document.getElementById('myPics');

			// Not style, Canvas should be changed. 	
			myPics.width=canvaswidth
			myPics.height=gratio*canvaswidth
			myPics.style.width=canvaswidth+'px';
			myPics.style.height=gratio*canvaswidth+'px';


			const context = myPics.getContext('2d');

			//lcon.fillStyle=environdefine.background[0];
			//lcon.fillRect(0,0,myPics.width, myPics.height);

			//context.fillStyle=environdefine.background[0];
			//context.fillRect(0,0,myPics.width, myPics.height);

			//The x and y offset of the canvas from the edge of the page
			const rect = myPics.getBoundingClientRect();

			//Add the event listeners for mousedown, mousemove, and mouseup
			myPics.addEventListener('mousedown',e=>{
				x = e.clientX-rect.left;
				y = e.clientY-rect.top;
				isDrawing = true;
				socket.emit('mentortomenteedraw',{pos:convertToratio(x,y),mousestat:'down',username:chosenuser,statoption:stat})
			});

			myPics.addEventListener('mousemove',e=>{
				if(isDrawing===true){
					drawLine(context,x,y,e.clientX-rect.left, e.clientY-rect.top,stat,0);
					x = e.clientX - rect.left;
					y = e.clientY - rect.top;
					socket.emit('mentortomenteedraw',{pos:convertToratio(x,y),mousestat:'move',username:chosenuser,statoption:stat})
				}
			});

			window.addEventListener('mouseup',e => {
				if(isDrawing === true){
					drawLine(context, x, y, e.clientX - rect.left, e.clientY - rect.top,stat,0);
					x = 0;
					y = 0;
					isDrawing = false;
					socket.emit('mentortomenteedraw',{pos:convertToratio(x,y),mousestat:'up',username:chosenuser,statoption:stat})
				}
			});



			/*
			var optionpanel=document.getElementById('optionpanel');


			var colorbutton=document.createElement('button');
			colorbutton.id='colordisplay';
			colorbutton.innerHTML=stat.color;
			optionpanel.appendChild(colorbutton);

			var sizebutton=document.createElement('button');
			sizebutton.id='sizedisplay';
			optionpanel.appendChild(sizebutton);
			sizebutton.innerHTML=stat.size;
			*/
			function clearLcon(){
				lcon.clearRect(0,0,layerpic.width, layerpic.height)
				//lcon.fillStyle=environdefine.background[0];
				//lcon.fillRect(0,0,layerpic.width, layerpic.height);
				socket.emit('mentortomenteedrawerase',{username:chosenuser,mode:1});
				//socket.emit('mentortomenteeclearlcon',{pos:convertToratio(x,y),mousestat:'move',username:chosenuser,statoption:stat})
			}

			function drawLine(context,x1, y1, x2, y2,vstat,mode){
				if(mode==0){//user
					if(stat.code=='layer'){
						lcon.beginPath();
						lcon.globalCompositeOperation='source-over';
						lcon.strokeStyle = stat.color;
						lcon.lineWidth = stat.size;
						lcon.lineCap = 'round';
						lcon.lineJoin='round';
						lcon.moveTo(x1, y1);
						lcon.lineTo(x2, y2);
						lcon.stroke();
						lcon.closePath();
					}else if(stat.code=='eraser'){ 
						context.beginPath();
						context.globalCompositeOperation='destination-out';
						context.lineWidth=stat.size;
						context.moveTo(x1, y1);
						context.lineTo(x2, y2);
						context.lineJoin='round';
						context.lineCap='round';
						context.stroke();
						context.closePath();
				
					}else if(stat.code=='layereraser'){ 
						lcon.beginPath();
						lcon.globalCompositeOperation='destination-out';
						lcon.strokeStyle = stat.color;
						lcon.lineWidth = stat.size;
						lcon.lineCap = 'round';
						lcon.lineJoin='round';
						lcon.moveTo(x1, y1);
						lcon.lineTo(x2, y2);
						lcon.stroke();
						lcon.closePath();

					}else{ 
						context.beginPath();
						context.globalCompositeOperation='source-over';
						context.strokeStyle = stat.color;
						context.lineWidth = stat.size;
						context.lineCap = 'round';
						context.lineJoin='round';
						context.moveTo(x1, y1);
						context.lineTo(x2, y2);
						context.stroke();
						context.closePath();
					}
				}else if(mode==1){//tuser
					if(vstat.code=='eraser'){
						context.beginPath();
						context.globalCompositeOperation='destination-out';	
						context.lineWidth=vstat.size;
						context.lineCap='round';
						context.moveTo(x1,y1);
						context.lineTo(x2,y2);
						context.stroke();
						context.closePath();
					}else{
						context.beginPath();
						context.globalCompositeOperation='source-over';
						context.strokeStyle = environdefine[vstat.code][0];
						context.lineWidth = vstat.size;
						context.lineCap = 'round';
						context.lineJoin='round';
						context.moveTo(x1, y1);
						context.lineTo(x2, y2);
						context.stroke();
						context.closePath();
					}
				}
				
			}

			var touchX, touchY;
			function getTouchPos(e) {
				if (!e)var e = event;
				if(e.touches) {
					if (e.touches.length == 1) { // Only deal with one finger
						var touch = e.touches[0]; // Get the information for finger #1
						touchX=touch.pageX-touch.target.offsetLeft;
						touchY=touch.pageY-touch.target.offsetTop;
					}
				}
			}

			function sketchpad_touchStart(){
				getTouchPos();
				x=touchX;
				y=touchY;
				drawLine(context, x, y, touchX, touchY,stat,0);
				socket.emit('mentortomenteedraw',{pos:convertToratio(x,y),mousestat:'down',username:chosenuser,statoption:stat})
				event.preventDefault();	
			}

			function sketchpad_touchMove(e){
				getTouchPos(e);
				
				drawLine(context, x, y, touchX, touchY,stat,0);

				x=touchX;
				y=touchY;
				socket.emit('mentortomenteedraw',{pos:convertToratio(x,y),mousestat:'move',username:chosenuser,statoption:stat})
				event.preventDefault();	
			}

			
			myPics.addEventListener('touchstart',sketchpad_touchStart, false);
			myPics.addEventListener('touchmove',sketchpad_touchMove,false);

			var prvx=0, prvy=0;
			socket.on('copypicsofmentee',function(ma){
				//drawDot(copycontext,ma.pos[0],ma.pos[1]);
				var cx=ma.pos[0]*(rect.right-rect.left);
				var cy=ma.pos[1]*(rect.bottom-rect.top);

				if(ma.mousestat==='move'){
					drawLine(context,prvx,prvy,cx,cy,ma.statoption,1);
					prvx = cx;
					prvy = cy;
				}else if(ma.mousestat==='up'){
					drawLine(context, prvx, prvy,cx,cy,ma.statoption,1);
					prvx = 0;
					prvy = 0;

				}else if(ma.mousestat==='down'){
					prvx = cx;
					prvy = cy;
				}
			});

			function clearCanvas(){/*
				function b64ToUnit8Array(b64Image){
					var img = atob(b64Image.split(',')[1]);	
					var img_buffer=[];
					var i=0;
					while(i<img.length){
						img_buffer.push(img.charCodeAt(i));
						i++;
					}
					return new Uint8Array(img_buffer);
				}


				var b64Image=myPics.toDataURL('image/png');
				var blob = dataURItoBlob(b64Image);

				var formData = new FormData();
				
				formData.append('file',blob,'screen_'+Date.now()+'.png');


				var xhr = new XMLHttpRequest();
				xhr.open('post','/xhr',true);
				xhr.send(formData);
				
				function dataURItoBlob(dataURI){
					var byteString = atob(dataURI.split(',')[1]);
					var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0]

					var ab = new ArrayBuffer(byteString.length);
					var ia = new Uint8Array(ab);
					for(var i=0; i<byteString.length; i++){
						ia[i] = byteString.charCodeAt(i);
					}
					var bb = new Blob([ab],{'type':mimeString});
					return bb;
				}	*/
				screenSaveToServer(function(){
					context.clearRect(0,0,myPics.width, myPics.height)
				});
				socket.emit('mentortomenteedrawerase',{username:chosenuser,mode:0})

				
			}


			function sendMentormsg(){
				if(chosenuser!=''){
					var mentormsg=document.getElementById('chatmsg').value;
					socket.emit('chattingtoserver',{username:chosenuser,chatoption:0,chatmsg:mentormsg});
					document.getElementById('chatmsg').value='';

					removeallele('shareinputdiv');
					var msgdiv=document.createElement('div');	

					var fontfactor=3;
					var msga=document.createElement('A');
					msga.style.fontSize=((canvaswidth*14)/(1440))*fontfactor + 'px';
					msga.innerHTML=mentormsg;
					msga.style.color='white';

					msgdiv.style.padding='5% 0 0 5%'
					msgdiv.appendChild(msga);
					shareinputdiv.appendChild(msgdiv);


					

					MathJax.Hub.Queue(["Typeset",MathJax.Hub,"shareinputdiv"])	




				}else{
					alert('User is not chosend');
				}
			}

			document.getElementById('chatmsg').addEventListener('keydown',function(e){
				//if(!e){var e=window.event;}
				//e.preventDefault();
				if(e.keyCode==13){sendMentormsg();}
			},false);
			socket.on('chattingtouser',function(a){
				if(a.chatoption==1){
					var chathistorydiv=document.getElementById('chathistory');
					var msgdiv=document.createElement('div');	
					msgdiv.style.textAlign='right';
					var msga=document.createElement('A');
					msga.innerHTML='To '+a.username + ' : '+ a.chatmsg;
					msgdiv.appendChild(msga);
					chathistorydiv.appendChild(msgdiv);
				}else if(a.chatoption==2){
					socket.emit('chattingtoserver',{username:a.username,chatoption:3,chatmsg:a.chatmsg});
					var chathistorydiv=document.getElementById('chathistory');
					var msgdiv=document.createElement('div');	
					msgdiv.style.textAlign='left';
					var msga=document.createElement('A');
					msga.innerHTML='From ' + a.username+ ' : '+a.chatmsg;
					msgdiv.appendChild(msga);
					chathistorydiv.appendChild(msgdiv);

				}
			});


			//SHORT CUT KEY
			document.onkeydown = function(e){
				if(e.shiftKey && e.which==32){//first pen
					//clearLcon();
					stat.color=environdefine.firstpen[0];
					stat.size=environdefine.firstpen[1];
					stat.code='firstpen';
				}else if(e.shiftKey && e.which==81){//eraser;
					/*
					stat.color=environdefine.eraser[0];
					stat.size=environdefine.eraser[1];
					stat.code=environdefine.eraser[2];

					*/
					if(stat.code=='layer'){
						stat.color=environdefine.layereraser[0];
						stat.size=environdefine.layereraser[1];
						stat.code=environdefine.layereraser[2];

					}else{
						stat.color=environdefine.eraser[0];
						stat.size=environdefine.eraser[1];
						stat.code=environdefine.eraser[2];
					}
				}else if(e.shiftKey && e.which==82){
					//clearLcon();
					stat.color=environdefine.secondpen[0];
					stat.size=environdefine.secondpen[1];
					stat.code='secondpen';

				}else if(e.shiftKey && e.which==69){
					if(stat.code=='layer'){
						clearLcon();
					}else if(stat.code=='layereraser'){
						clearLcon();
					}else{
						clearCanvas();
					}
				}else if(e.shiftKey && e.which==187){
					//stat.size=stat.size+1;
					stat.size=stat.size*2;
				}else if(e.shiftKey && e.which==189){
					//stat.size=stat.size-1;;
					stat.size=stat.size*(.5);
				}else if(e.shiftKey && e.which==89){
					stat.code=environdefine.layer.code;
					stat.color=environdefine.layer.color;
					stat.size=environdefine.layer.size;
				}else if(e.shiftKey && e.which==70){
					switchFolding();
				}
				//document.getElementById('sizedisplay').innerHTML=stat.size;
				//document.getElementById('colordisplay').innerHTML=stat.color;
			}

			//convert to Ratio;
			function convertToratio(rx, ry){
				var canvaswt=rect.right-rect.left;
				var canvashg=rect.bottom-rect.top;
				var nx=rx/canvaswt;
				var ny=ry/canvashg;
				
				return [nx,ny];
			}
				

			var optionpanelfolding=0;
			function switchFolding(){
				var callingoptionpaneldiv=document.getElementById('callingoptionpanel');
				if(optionpanelfolding==0){
					callingoptionpaneldiv.style.width=60+'%';
					optionpanelfolding=1;
				}else if(optionpanelfolding==1){
					callingoptionpaneldiv.style.width=5+'%';
					optionpanelfolding=0;
				}
			}	
			function screenSave(aid,canvid,callback){

				var sharediv=document.getElementById('sharedinputdiv');
				//sharediv.style.backgroundColor=environdefine.background[0];
				html2canvas(sharediv).then(function(sharei){
					var screensavea=document.createElement('A');
					var can3=document.createElement('canvas');
					var ctx3=can3.getContext('2d');
				

					can3.width=canvaswidth
					can3.height=gratio*canvaswidth
					can3.style.width=canvaswidth+'px';
					can3.style.height=gratio*canvaswidth+'px';


					ctx3.drawImage(layerpic,0,0);
					ctx3.drawImage(sharei,0,0);
					ctx3.drawImage(myPics,0,0);
		
					callback();
					
					

				});
			}
			function screenSaveToServer(callback){


				var sharediv=document.getElementById('shareinputdiv');
				var can3=document.createElement('canvas');
				var ctx3=can3.getContext('2d');
				can3.width=canvaswidth
				can3.height=gratio*canvaswidth
				can3.style.width=canvaswidth+'px';
				can3.style.height=gratio*canvaswidth+'px';

				html2canvas(sharediv).then(function(sharei){
					
					ctx3.drawImage(sharei,0,0);
					ctx3.drawImage(myPics,0,0);
					ctx3.drawImage(layerpic,0,0);

					var b64Image=can3.toDataURL('image/png');
					var blob = dataURItoBlob(b64Image);
	
					var formData = new FormData();
					
					formData.append('file',blob,'screen_'+'bob'+'_'+Date.now()+'.png');
					formData.append('username','bob');

					
					function sendFinish(){
						socket.emit('reloadusernote',{username:'bob'});
						//tempAlert('화면이 저장되었습니다.',1000);
					}
				
					var xhr = new XMLHttpRequest();
					xhr.addEventListener('load',sendFinish);
					callback();	

					xhr.open('post','/xhr',true);
					xhr.send(formData);

				});




			
				function dataURItoBlob(dataURI){
					var byteString = atob(dataURI.split(',')[1]);
					var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0]

					var ab = new ArrayBuffer(byteString.length);
					var ia = new Uint8Array(ab);
					for(var i=0; i<byteString.length; i++){
						ia[i] = byteString.charCodeAt(i);
					}
					var bb = new Blob([ab],{'type':mimeString});
					return bb;
				}	


			}
			function tempAlert(msg,duration){
				var el = document.createElement("div");
				el.setAttribute("style","position:absolute;top:10%;left:35%;background-color:white;padding:5% 10%;z-index:6;");
				el.innerHTML = msg;
				setTimeout(function(){
					el.parentNode.removeChild(el);
				},duration);
				document.body.appendChild(el);
			}

			socket.on('sendquestionpictomentor',function(a){
				removeallele('shareinputdiv')
				var picdiv=document.createElement('div');
				picdiv.id='picdiv';
				var picdivimg=document.createElement('img');
				picdivimg.id='picdivimg';
				picdivimg.src='/uploadquestion/'+a.picname;
				picdiv.appendChild(picdivimg);
				//picdiv.style.backgroundColor=environdefine.picbackcolor;
				//picdiv.style.padding='0 0 5% 0';
				shareinputdiv.appendChild(picdiv);

				//picdiv.style.cssFloat='left';
				picdiv.style.width='40%';
				
			});

